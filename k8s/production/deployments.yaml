apiVersion: apps/v1
kind: Deployment
metadata:
  name: mangakai-backend
  namespace: mangakai-prod
  labels:
    app: mangakai
    component: backend
    environment: production
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: mangakai
      component: backend
  template:
    metadata:
      labels:
        app: mangakai
        component: backend
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mangakai-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: mangakai/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        - containerPort: 8001
          name: metrics
          protocol: TCP
        env:
        - name: DATABASE_URL
          value: "postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: DATABASE_NAME
        - name: DATABASE_USER
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: DATABASE_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mangakai-secrets
              key: DATABASE_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: REDIS_PORT
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: REDIS_DB
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mangakai-secrets
              key: REDIS_PASSWORD
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: mangakai-secrets
              key: GEMINI_API_KEY
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: mangakai-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: mangakai-secrets
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: AWS_REGION
        - name: S3_BUCKET
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: S3_BUCKET
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: LOG_LEVEL
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: CORS_ORIGINS
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: mangakai-data-pvc
      - name: app-logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "node-role.kubernetes.io/spot"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mangakai-celery-worker
  namespace: mangakai-prod
  labels:
    app: mangakai
    component: celery-worker
    environment: production
spec:
  replicas: 4
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: mangakai
      component: celery-worker
  template:
    metadata:
      labels:
        app: mangakai
        component: celery-worker
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: mangakai-worker
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: celery-worker
        image: mangakai/backend:latest
        imagePullPolicy: Always
        command: ["celery"]
        args: ["-A", "celery_app", "worker", "--loglevel=info", "--concurrency=2", "--max-tasks-per-child=1000"]
        ports:
        - containerPort: 8001
          name: metrics
          protocol: TCP
        env:
        - name: DATABASE_URL
          value: "postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
        - name: CELERY_BROKER_URL
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: CELERY_BROKER_URL
        - name: CELERY_RESULT_BACKEND
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: CELERY_RESULT_BACKEND
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: DATABASE_NAME
        - name: DATABASE_USER
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: DATABASE_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mangakai-secrets
              key: DATABASE_PASSWORD
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: REDIS_PORT
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: REDIS_DB
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mangakai-secrets
              key: REDIS_PASSWORD
        - name: GEMINI_API_KEY
          valueFrom:
            secretKeyRef:
              name: mangakai-secrets
              key: GEMINI_API_KEY
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: mangakai-secrets
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: mangakai-secrets
              key: AWS_SECRET_ACCESS_KEY
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: AWS_REGION
        - name: S3_BUCKET
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: S3_BUCKET
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: LOG_LEVEL
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - celery
            - -A
            - celery_app
            - inspect
            - ping
          initialDelaySeconds: 120
          periodSeconds: 60
          timeoutSeconds: 30
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - celery
            - -A
            - celery_app
            - inspect
            - active
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 15
          failureThreshold: 3
        volumeMounts:
        - name: app-data
          mountPath: /app/data
        - name: app-logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: mangakai-data-pvc
      - name: app-logs
        emptyDir: {}
      - name: tmp
        emptyDir:
          sizeLimit: 10Gi
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "node-role.kubernetes.io/spot"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mangakai-celery-beat
  namespace: mangakai-prod
  labels:
    app: mangakai
    component: celery-beat
    environment: production
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mangakai
      component: celery-beat
  template:
    metadata:
      labels:
        app: mangakai
        component: celery-beat
        environment: production
    spec:
      serviceAccountName: mangakai-beat
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: celery-beat
        image: mangakai/backend:latest
        imagePullPolicy: Always
        command: ["celery"]
        args: ["-A", "celery_app", "beat", "--loglevel=info", "--schedule=/app/celerybeat-schedule"]
        env:
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@$(REDIS_HOST):$(REDIS_PORT)/$(REDIS_DB)"
        - name: CELERY_BROKER_URL
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: CELERY_BROKER_URL
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: REDIS_PORT
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: REDIS_DB
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mangakai-secrets
              key: REDIS_PASSWORD
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: mangakai-config
              key: LOG_LEVEL
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        volumeMounts:
        - name: celery-beat-data
          mountPath: /app
        - name: app-logs
          mountPath: /app/logs
      volumes:
      - name: celery-beat-data
        persistentVolumeClaim:
          claimName: mangakai-beat-pvc
      - name: app-logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mangakai-nginx
  namespace: mangakai-prod
  labels:
    app: mangakai
    component: nginx
    environment: production
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: mangakai
      component: nginx
  template:
    metadata:
      labels:
        app: mangakai
        component: nginx
        environment: production
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        fsGroup: 101
      containers:
      - name: nginx
        image: nginx:alpine
        imagePullPolicy: Always
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "250m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: ssl-certificates
          mountPath: /etc/nginx/ssl
          readOnly: true
        - name: nginx-logs
          mountPath: /var/log/nginx
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: ssl-certificates
        secret:
          secretName: ssl-certificates
      - name: nginx-logs
        emptyDir: {}
      nodeSelector:
        kubernetes.io/arch: amd64